version: "3.4"
services:
    rabbitmq:
        image: rabbitmq:3.6-management-alpine
        restart: always
        ports:
          - 5672:5672
          - 15672:15672
        networks:
          - net
        deploy:
            placement:
                constraints:
                    - node.role == manager

    mongo:
        image: mongo:4.1.8-xenial
        restart: always
        ports:
          - 27017:27017
        volumes:
          - dbdata:/data/db
        env_file:
          - ./.env
        networks:
          - net
          - traefik-public
        deploy:
            placement:
                constraints:
                    - node.role == manager
            labels:
                - traefik.tcp.routers.mongo.rule=HostSNI(`mongodb.crystallography.io`)
                - traefik.tcp.routers.mongo.entrypoints=mongodb
                - traefik.tcp.routers.mongo.tls.passthrough=true
                - traefik.tcp.routers.mongo.service=mongo
                - traefik.tcp.services.mongo.loadbalancer.server.port=27017

    redis:
        image: redis:6.0.9-alpine
        restart: always
        ports:
          - 6379:6379
        volumes:
           - redisdata:/home/docker/data
        deploy:
            placement:
                constraints:
                    - node.role == manager
            labels:
                - traefik.tcp.routers.redis.rule=HostSNI(`redis.crystallography.io`)
                - traefik.tcp.routers.redis.entrypoints=redis
                - traefik.tcp.routers.redis.tls.passthrough=true
                - traefik.tcp.routers.redis.service=redis
                - traefik.tcp.services.redis.loadbalancer.server.port=6379
        command: 'redis-server --requirepass "${REDIS_PASSWORD}"'
        networks:
          - net
          - traefik-public
        env_file:
          - ./.env

    structure-to-index:
        image: 'gcr.io/crystallography-api/structure-to-index:latest'
        restart: always
        build:
            context: ./packages/containers/structure-to-index
            dockerfile: Dockerfile
        networks:
          - net
        env_file:
          - ./.env
        deploy:
            mode: replicated
            replicas: 4
        depends_on:
          - rabbitmq
          - mongo

    disk-to-db:
        image: 'gcr.io/crystallography-api/disk-to-db:latest'
        restart: always
        volumes:
          - cod-data:/home/data
        env_file:
          - ./.env
        networks:
          - net
        build:
            context: ./packages/containers/disk-to-db
            dockerfile: Dockerfile
        deploy:
            mode: replicated
            replicas: 4
        depends_on:
          - rabbitmq
          - mongo

    maintenance:
        image: 'gcr.io/crystallography-api/maintenance:latest'
        restart: always
        build:
            context: ./packages/containers/maintenance
            dockerfile: Dockerfile
        networks:
          - net
        env_file:
          - ./.env
        depends_on:
          - mongo

    cod-to-disk:
        image: 'gcr.io/crystallography-api/cod-to-disk:latest'
        restart: always
        volumes:
          - cod-data:/home/data
        networks:
          - net
        build:
            context: ./packages/containers/cod-to-disk
            dockerfile: Dockerfile
        depends_on:
          - rabbitmq

    web:
        image: 'gcr.io/crystallography-api/c14-web:latest'
        restart: always
        build:
            context: ./packages/containers/c14-web
            dockerfile: Dockerfile
        networks:
          - net
          - traefik-public
        env_file:
          - ./.env
        environment:
          - PORT=8060
        deploy:
            update_config:
                order: start-first
                failure_action: rollback
                delay: 10s
            labels:
                - traefik.enable=true
                - traefik.docker.network=traefik-public
                - traefik.constraint-label=traefik-public
                - traefik.http.routers.web-http.rule=Host(`crystallography.io`)
                - traefik.http.routers.web-http.entrypoints=http
                - traefik.http.routers.web-http.middlewares=https-redirect
                - traefik.http.routers.web-https.priority=10
                - traefik.http.routers.web-https.rule=Host(`crystallography.io`)
                - traefik.http.routers.web-https.entrypoints=https
                - traefik.http.routers.web-https.tls=true
                - traefik.http.routers.web-https.tls.certresolver=le
                - traefik.http.services.web.loadbalancer.server.port=8060

    api:
        image: 'gcr.io/crystallography-api/crystallography-io-api:latest'
        restart: always
        volumes:
          - cod-data:/home/data
        build:
            context: ./packages/containers/c14-api
            dockerfile: Dockerfile
        networks:
          - net
          - traefik-public
        env_file:
          - ./.env
        environment:
          - PORT=8070
        deploy:
            update_config:
                order: start-first
                failure_action: rollback
                delay: 10s
            labels:
                - traefik.enable=true
                - traefik.docker.network=traefik-public
                - traefik.constraint-label=traefik-public
                - traefik.http.routers.api-https.rule=(Host(`crystallography.io`) && (PathPrefix(`/api`) || PathPrefix(`/sitemap`) || PathPrefix(`/cif`)))
                - traefik.http.routers.api-https.priority=20
                - traefik.http.routers.api-https.entrypoints=https
                - traefik.http.routers.api-https.tls=true
                - traefik.http.routers.api-https.tls.certresolver=le
                - traefik.http.services.api.loadbalancer.server.port=8070
        depends_on:
          - mongo

    searchrouter:
        image: 'gcr.io/crystallography-api/search-router:latest'
        restart: always
        build:
            context: ./packages/containers/searchrouter
            dockerfile: Dockerfile
        networks:
          - net
          - traefik-public
        env_file:
          - ./.env
        environment:
          - PORT=8050
        depends_on:
          - mongo
          - redis
        deploy:
            update_config:
                order: start-first
                failure_action: rollback
                delay: 10s
            labels:
                - traefik.enable=true
                - traefik.docker.network=traefik-public
                - traefik.constraint-label=traefik-public
                - traefik.http.routers.search-https.rule=(Host(`crystallography.io`) && (PathPrefix(`/api/v1/search/structure`)|| PathPrefix(`/api/v1/live`)))
                - traefik.http.routers.search-https.entrypoints=https,ws,wss
                - traefik.http.routers.search-https.tls=true
                - traefik.http.routers.search-https.priority=40
                - traefik.http.routers.search-https.tls.certresolver=le
                - traefik.http.services.search.loadbalancer.server.port=8050

    searchworker:
        image: 'gcr.io/crystallography-api/searchworker:latest'
        restart: always
        build:
            context: ./packages/containers/searchworker
            dockerfile: Dockerfile
        networks:
          - net
        env_file:
          - ./.env
        depends_on:
          - mongo
          - redis

networks:
  net:
  traefik-public:
    external: true

volumes:
    cod-data:
    dbdata:
    redisdata:
